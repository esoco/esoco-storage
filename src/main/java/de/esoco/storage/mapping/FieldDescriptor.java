//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// This file is a part of the 'esoco-storage' project.
// Copyright 2015 Elmar Sonnenschein, esoco GmbH, Flensburg, Germany
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//	  http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
package de.esoco.storage.mapping;

import de.esoco.storage.StorageManager;
import de.esoco.storage.StorageRelationTypes;

import java.lang.reflect.Field;

import org.obrel.core.RelatedObject;

import static de.esoco.storage.StorageRelationTypes.STORAGE_DATATYPE;
import static de.esoco.storage.StorageRelationTypes.STORAGE_MAPPING;
import static de.esoco.storage.StorageRelationTypes.STORAGE_NAME;

import static org.obrel.type.MetaTypes.AUTOGENERATED;
import static org.obrel.type.MetaTypes.OBJECT_ID_ATTRIBUTE;
import static org.obrel.type.MetaTypes.PARENT_ATTRIBUTE;

/**
 * A storage mapping attribute descriptor that is based on the fields of a
 * described class.
 *
 * @see ClassMapping
 */
public class FieldDescriptor extends RelatedObject {

	private Field field;

	/**
	 * Package-internal constructor to create a mapping for a field. Also
	 * sets a
	 * relation of the type {@link StorageRelationTypes#STORAGE_NAME} with the
	 * field name on this instance.
	 *
	 * @param field The field described by this instance
	 */
	@SuppressWarnings({ "boxing" })
	FieldDescriptor(Field field) {
		this.field = field;

		String fieldName = field.getName();
		Class<?> fieldType = field.getType();

		if (!field.isAccessible()) {
			field.setAccessible(true);
			// TODO: if this fails try to find public get method for field
		}

		// remove a single prefix character
		if (fieldName.length() >= 2 &&
			Character.isLowerCase(fieldName.charAt(0)) &&
			Character.isUpperCase(fieldName.charAt(1))) {
			fieldName = fieldName.substring(1);
		}

		set(STORAGE_NAME, fieldName);
		set(STORAGE_DATATYPE, fieldType);

		if (fieldName.equalsIgnoreCase("id")) {
			set(OBJECT_ID_ATTRIBUTE, true);

			if (fieldType == int.class || fieldType == Integer.class ||
				fieldType == long.class || fieldType == Long.class) {
				set(AUTOGENERATED, true);
			}
		} else if (fieldName.equalsIgnoreCase("parent")) {
			ClassMapping<?> parentMapping =
				(ClassMapping<?>) StorageManager.getMapping(field.getType());

			set(STORAGE_MAPPING, parentMapping);
			set(PARENT_ATTRIBUTE, true);
			set(STORAGE_DATATYPE, int.class);
			// TODO: lookup datatype of the parent's key instead
		}
		// TODO: set MetaTypes for collection and map datatypes
	}

	/**
	 * Returns the field instance that is described by this instance.
	 *
	 * @return The described field
	 */
	public final Field getField() {
		return field;
	}

	/**
	 * Returns the field name.
	 *
	 * @see Object#toString()
	 */
	@Override
	public String toString() {
		return String.format("FieldDescriptor[%s,%s]", field.getName(),
			field.getType().getSimpleName());
	}

	/**
	 * Returns the value of the field described by this instance from the given
	 * object.
	 *
	 * @param object The object to return the field value from
	 * @return The field value
	 * @throws IllegalArgumentException If accessing the field fails
	 */
	Object getFieldValue(Object object) {
		try {
			return field.get(object);
		} catch (Exception e) {
			throw new IllegalArgumentException(
				"Cannot access field " + field.getName());
		}
	}

	/**
	 * Set the value of the field described by this instance in the given
	 * object.
	 *
	 * @param object The object to set the field value in
	 * @param value  The new field value
	 * @throws IllegalArgumentException If accessing the field fails
	 */
	void setFieldValue(Object object, Object value) {
		try {
			field.set(object, value);
		} catch (Exception e) {
			throw new IllegalArgumentException(
				"Cannot access field " + field.getName(), e);
		}
	}
}
